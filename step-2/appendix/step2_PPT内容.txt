
1. 使用JQM的header和footer组件，并且模仿它的写法 position absolute + relative
2. 重构： position absolute + relative
3. ko 数据绑定： model针对某个对象， 监听对象并且-----能用图表现吗？
4. JQM页面内的路由->data role="page"， on监听click事件并且调用location.href
5. 组件的构建：   使用flex弹性布局来实现， 组合性的弹性布局
6. 实现和虚线的构成方式


学到的知识：   	1.  JQM如何重新绘制基础组件
		2. JQM的布局方式， 使用相对和绝对以及..
		3. MVVM（图文？）和knockout数据绑定的好处 + 可以和之前对比

做好PPT之后请检查自己当前的问题！！！
important

标题

MVVM优点编辑
MVVM模式和MVC模式一样，主要目的是分离视图（View）和模型（Model），有几大优点
1. 低耦合。视图（View）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的"View"上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。
2. 可重用性。你可以把一些视图逻辑放在一个ViewModel里面，让很多view重用这段视图逻辑。
3. 独立开发。开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计，使用Expression Blend可以很容易设计界面并生成xaml代码。
4. 可测试。界面素来是比较难于测试的，而现在测试可以针对ViewModel来写。 [1] 
MVVM控件编辑
使用MVVM来开发用户控件。由于用户控件在大部分情况下不涉及到数据的持久化，所以如果将M纯粹理解为DomainModel的话，
使用MVVM模式来进行自定义控件开发实际上可以省略掉M，变成了VVM。 [2] 

MVVM模式的组成部分编辑
模型
模型是指代表真实状态内容的领域模型（面向对象），或指代表内容的数据访问层（以数据为中心）。
视图
就像在MVC和MVP模式中一样，视图是用户在屏幕上看到的结构、布局和外观（UI）。
视图模型
视图模型是暴露公共属性和命令的视图的抽象。MVVM没有MVC模式的控制器，也没有MVP模式的presenter，有的是一个绑定器。
在视图模型中，绑定器在视图和数据绑定器之间进行通信。
绑定器
声明性数据和命令绑定隐含在MVVM模式中。在Microsoft解决方案堆中，绑定器是一种名为XAML的标记语言。
绑定器使开发人员免于被迫编写样板式逻辑来同步视图模型和视图。在微软的堆之外实现时，声明性数据绑定技术的出现是实现该模式的一个关键因素。 [1] 